import{_ as t,p as e,q as r,a1 as a}from"./framework-96b046e1.js";const d={},n=a('<h1 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> Operators</h1><p>Every fragment of code is, at its core, just a sequence of primitive operations. Here&#39;s a list of the basic operators we need to understand as we gain an understanding of variables and other programming fundamentals.</p><h2 id="basic-arithmetic-operators" tabindex="-1"><a class="header-anchor" href="#basic-arithmetic-operators" aria-hidden="true">#</a> Basic Arithmetic Operators</h2><p>Whether performing a simple calculation or writing an expression, we will use the basic math operators quite frequently.</p><table><thead><tr><th>Operator</th><th style="text-align:center;">Character</th></tr></thead><tbody><tr><td>Addition</td><td style="text-align:center;">+</td></tr><tr><td>Subtraction</td><td style="text-align:center;">-</td></tr><tr><td>Multiplication</td><td style="text-align:center;">*</td></tr><tr><td>Division</td><td style="text-align:center;">/</td></tr></tbody></table><h2 id="advanced-arithmetic-operators" tabindex="-1"><a class="header-anchor" href="#advanced-arithmetic-operators" aria-hidden="true">#</a> Advanced Arithmetic Operators</h2><p>For more advanced math operations, these ones will come in handy. The increment and decrement shorthands are particularly useful.</p><table><thead><tr><th>Operator</th><th style="text-align:center;">Character</th></tr></thead><tbody><tr><td>Exponentiation</td><td style="text-align:center;">**</td></tr><tr><td>Modulus (remainder after division)</td><td style="text-align:center;">%</td></tr><tr><td>Increment (shorthand)</td><td style="text-align:center;">++</td></tr><tr><td>Decrement (shorthand)</td><td style="text-align:center;">--</td></tr></tbody></table><h2 id="assignment-operators" tabindex="-1"><a class="header-anchor" href="#assignment-operators" aria-hidden="true">#</a> Assignment Operators</h2><p>Arithmetic operators would be quite useless without some way to assign values to variables, which is where this set of operators comes in.</p><table><thead><tr><th>Operator</th><th style="text-align:center;">Character</th></tr></thead><tbody><tr><td>Assignment</td><td style="text-align:center;">=</td></tr><tr><td>Addition with Assignment</td><td style="text-align:center;">+=</td></tr><tr><td>Subtraction with Assignment</td><td style="text-align:center;">-=</td></tr><tr><td>Multiplication with Assignment</td><td style="text-align:center;">*=</td></tr><tr><td>Division with Assignment</td><td style="text-align:center;">/=</td></tr><tr><td>Exponentiation with Assignment</td><td style="text-align:center;">**=</td></tr><tr><td>Modulus with Assignment</td><td style="text-align:center;">%=</td></tr></tbody></table><h2 id="comparison-operators" tabindex="-1"><a class="header-anchor" href="#comparison-operators" aria-hidden="true">#</a> Comparison Operators</h2><p>These operators are used to write comparison expressions. Note that when <code>=</code> is used in these operators, we are <strong>not</strong> assigning values to variables.</p><table><thead><tr><th>Operator</th><th style="text-align:center;">Character</th></tr></thead><tbody><tr><td>Equality</td><td style="text-align:center;">==</td></tr><tr><td>Strict Equality (equal value and data type)</td><td style="text-align:center;">===</td></tr><tr><td>Inequality</td><td style="text-align:center;">!=</td></tr><tr><td>Strict Inequality (unequal value and data type)</td><td style="text-align:center;">!==</td></tr><tr><td>Greater Than</td><td style="text-align:center;">&gt;</td></tr><tr><td>Less Than</td><td style="text-align:center;">&lt;</td></tr><tr><td>Greater Than or Equal To</td><td style="text-align:center;">&gt;=</td></tr><tr><td>Less Than or Equal To</td><td style="text-align:center;">&lt;=</td></tr><tr><td>Ternary (conditional shorthand)</td><td style="text-align:center;">?</td></tr></tbody></table><h2 id="logical-operators" tabindex="-1"><a class="header-anchor" href="#logical-operators" aria-hidden="true">#</a> Logical Operators</h2><p>Logical Operators are used for evaluating multiple comparisons in a single expression.</p><table><thead><tr><th>Operator</th><th style="text-align:center;">Character</th></tr></thead><tbody><tr><td>Logical AND</td><td style="text-align:center;">&amp;&amp;</td></tr><tr><td>Logical OR</td><td style="text-align:center;">||</td></tr><tr><td>Logical NOT</td><td style="text-align:center;">!</td></tr></tbody></table>',17),i=[n];function s(o,l){return e(),r("div",null,i)}const c=t(d,[["render",s],["__file","operators.html.vue"]]);export{c as default};
