import{_ as p,M as a,p as r,q as c,R as e,t as n,N as t,V as d,a1 as i}from"./framework-96b046e1.js";const u={},h=e("h1",{id:"using-strings",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#using-strings","aria-hidden":"true"},"#"),n(" Using Strings")],-1),m=e("h2",{id:"creating-a-template",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-a-template","aria-hidden":"true"},"#"),n(" Creating a Template")],-1),g=i(`<p>Using template literals, it is possible to create an HTML template, complete with white space, tabs, and carriage returns.</p><p>For example, if we wanted to create an HTML unordered list of animals with a title, we do so with a template literal.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;h2&gt;Animals&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;cat&lt;/li&gt;
  &lt;li&gt;dog&lt;/li&gt;
  &lt;li&gt;mouse&lt;/li&gt;
&lt;/ul&gt;</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creating-a-template-with-placeholders" tabindex="-1"><a class="header-anchor" href="#creating-a-template-with-placeholders" aria-hidden="true">#</a> Creating a Template with Placeholders</h2><p>We can take this a step further by using placeholders in place of the text. Then using variables to recreate the HTML.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token string">&#39;Animals&#39;</span>
<span class="token keyword">const</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mouse&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
&lt;h2&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>animals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
  &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>animals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
  &lt;li&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>animals<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/li&gt;
&lt;/ul&gt;</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inserting-templates-with-innerhtml" tabindex="-1"><a class="header-anchor" href="#inserting-templates-with-innerhtml" aria-hidden="true">#</a> Inserting Templates with <code>innerHTML</code></h2><p>There are two common techniques to insert a template into the HTML. The first is to use the <code>innerHTML</code> property and the second is to use the <code>insertAdjacentHTML()</code> method.</p><div class="custom-container warning"><p class="custom-container-title">Note</p><p>Both these techniques require a string and therefore will <strong>NOT</strong> work with the <code>createElement()</code> method discussed in the next section.</p></div><p>The <code>innerHTML</code> property of any HTML element will contain all of the HTML that within the element.</p>`,10),k=e("iframe",{height:"265",style:{width:"100%"},scrolling:"no",title:"HTML Creation - The innerHTML Property",src:"//codepen.io/IMD/embed/JzKjqO/?height=265&theme-id=0&default-tab=js,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/JzKjqO/'>HTML Creation - The innerHTML Property</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),f=e("p",null,[n("Like any other property, it is possible to change an element's "),e("code",null,"innerHTML"),n(" by using an equals sign "),e("code",null,"="),n(" and followed by the string HTML.")],-1),b=e("div",{class:"custom-container warning"},[e("p",{class:"custom-container-title"},"Note"),e("p",null,[n("Change an element's "),e("code",null,"innerHTML"),n(" will remove any existing HTML inside the element. To keep the existing HTML, you must include the element's "),e("code",null,"innerHTML"),n(" after the equals sign.")])],-1),v=e("iframe",{height:"351",style:{width:"100%"},scrolling:"no",title:"HTML Creation - Using the innerHTML property",src:"//codepen.io/IMD/embed/YgWPyJ/?height=351&theme-id=0&default-tab=js,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/YgWPyJ/'>HTML Creation - Using the innerHTML property</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),M=e("h2",{id:"using-a-loop-with-innerhtml",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#using-a-loop-with-innerhtml","aria-hidden":"true"},"#"),n(" Using a Loop with "),e("code",null,"innerHTML")],-1),T=e("p",null,"While the above example works to create and insert new HTML, it would not be easy to maintain if additional animals are added to the list. This is where loops come in.",-1),w=e("p",null,"By using a loop to iterate over the array, it is possible to create the list item HTML without the need for additional HTML for each new animal.",-1),_={href:"https://mtm6230.github.io/content/loops/#the-for-of-loop",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,"for...of",-1),H=e("code",null,"items",-1),y=e("code",null,"items",-1),I={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join",target:"_blank",rel:"noopener noreferrer"},j=e("code",null,"join()",-1),x=e("iframe",{height:"420",style:{width:"100%"},scrolling:"no",title:"HTML Creation - Template Literals",src:"//codepen.io/IMD/embed/drGYrw/?height=420&theme-id=0&default-tab=js,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/drGYrw/'>HTML Creation - Template Literals</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),D=i(`<h2 id="inserting-templates-with-insertadjacenthtml" tabindex="-1"><a class="header-anchor" href="#inserting-templates-with-insertadjacenthtml" aria-hidden="true">#</a> Inserting Templates with <code>insertAdjacentHTML()</code></h2><p>Unlike the <code>innerHTML</code> property, which replaces the all the HTML of an element, the <code>insertAdjacentHTML()</code> method inserts a HTML string into an at a specified position.</p><p>The method takes two parameters. The first is the position, which will consist of one of the four predefined positions (see below). The second is a string of HTML.</p><p>The four predefined positions are:</p><ul><li><code>beforebegin</code>: Before the element</li><li><code>afterbegin</code>: Inside the element, before its first child</li><li><code>beforeend</code>: Inside the element, after its last child</li><li><code>afterend</code>: After the element</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- beforebegin --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>element<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- afterbegin --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- beforeend --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- afterend --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),q=e("iframe",{height:"360",style:{width:"100%"},scrolling:"no",title:"HTML Creation - Using the insertAdjacentHTML() Method",src:"//codepen.io/IMD/embed/bZedGq/?height=360&theme-id=0&default-tab=js,result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/bZedGq/'>HTML Creation - Using the insertAdjacentHTML() Method</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1);function C(P,S){const o=a("RouterLink"),l=a("Scrimba"),s=a("ExternalLinkIcon");return r(),c("div",null,[h,e("p",null,[n("With the introduction of "),t(o,{to:"/modules/js/js-variables/strings.html#template-literals"},{default:d(()=>[n("Template Literals")]),_:1}),n(", creating HTML has become much easier for novice developers, because Template Literals allow the developer to create HTML in JavaScript that looks and feels like writing in an HTML file.")]),m,t(l,{id:"/c/cZWDEDAD"}),g,k,f,b,v,M,T,w,e("p",null,[n("In the example below, we are using "),e("a",_,[n("the "),L,n(" loop"),t(s)]),n(" to iterate over the array, and storing each list item to a new array, "),H,n(". This new "),y,n(" array is then inserted into our template literal using the "),e("a",I,[j,t(s)]),n(" method to convert array to a string.")]),x,D,q])}const U=p(u,[["render",C],["__file","using-strings.html.vue"]]);export{U as default};
