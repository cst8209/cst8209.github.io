import{_ as c,M as a,p,q as i,N as e,R as n,t as s,a1 as l}from"./framework-96b046e1.js";const r={},u=n("h1",{id:"for-in",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#for-in","aria-hidden":"true"},"#"),s(" for...in")],-1),d={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"for...in",-1),v=l(`<p>The expression of the <code>for...in</code> loop starts with an initialization of the variable used to hold the key of each property. This is followed by the keyword <code>in</code> and ends with the object.</p><p>To retrieve each property&#39;s value, bracket notation <strong>MUST</strong> be used with the object&#39;s variable and the current key. If dot notation is used, it will likely return <code>undefined</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// retrieve the value  </span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span>key<span class="token punctuation">)</span>  <span class="token comment">// undefined</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sounds <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">cow</span><span class="token operator">:</span> <span class="token string">&#39;moo&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">duck</span><span class="token operator">:</span> <span class="token string">&#39;quack&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">horse</span><span class="token operator">:</span> <span class="token string">&#39;nay&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> animal <span class="token keyword">in</span> sounds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Logs each animals&#39; sound</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sounds<span class="token punctuation">[</span>animal<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>While it is possible to use the <code>for...in</code> statement with arrays, it is not recommended. It is better to use the <code>for...of</code> statement with arrays.</p></div>`,5);function m(h,f){const t=a("Youtube"),o=a("ExternalLinkIcon");return p(),i("div",null,[u,e(t,{id:"prl73KRkB34",citation:"griffith"}),n("p",null,[s("The "),n("a",d,[k,s(" statement"),e(o)]),s(" iterates over the properties of an object.")]),v])}const _=c(r,[["render",m],["__file","for...in.html.vue"]]);export{_ as default};
