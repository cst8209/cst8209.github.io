import{_ as o,M as c,p as i,q as p,R as a,t as n,N as e,a1 as t}from"./framework-96b046e1.js";const l={},u=a("h1",{id:"javascript-functions",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#javascript-functions","aria-hidden":"true"},"#"),n(" JavaScript Functions")],-1),d={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",target:"_blank",rel:"noopener noreferrer"},r=a("h2",{id:"function-declaration",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#function-declaration","aria-hidden":"true"},"#"),n(" Function Declaration")],-1),m={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>The function declaration, defines a function by starting with the <code>function</code> keyword followed by the <em>name</em> of the function, a set of parentheses (<code>()</code>) and a set of curly braces (<code>{}</code>). The block of code to be executed, also known as the &#39;body&#39; of the function, goes between the curly braces.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// defining the add function</span>
<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The body of a function will not execute until the function is invoked. Invocation will occur with the function&#39;s <em>name</em> is called with a set of parentheses.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// defining the add function</span>
<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;add&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// invoking the add function</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;add&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="the-return-statement" tabindex="-1"><a class="header-anchor" href="#the-return-statement" aria-hidden="true">#</a> The return Statement</h2>`,5),v={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return",target:"_blank",rel:"noopener noreferrer"},f=a("code",null,"return",-1),h=a("code",null,"return",-1),b=a("code",null,"undefined",-1),g=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// defining the add function</span>
<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;add&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// invoking the add function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;add&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="function-parameters" tabindex="-1"><a class="header-anchor" href="#function-parameters" aria-hidden="true">#</a> Function Parameters</h2><p>A function parameter is like a variable that can accept a value during invocation. Parameters are declared when the function is defined and can be used anywhere inside the function body. A function can have multiple parameters.</p><p>When we call a function, we can pass values into it as a comma separated list inside the parentheses. These values are called arguments.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// defining the add function with parameters</span>
<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
<span class="token comment">// invoking the add function and passing arguments</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="function-scope" tabindex="-1"><a class="header-anchor" href="#function-scope" aria-hidden="true">#</a> Function Scope</h2><p>Function Scope is the concept that variables declared inside fo a function are <strong>ONLY</strong> accessible to that function. This is in contrast to variables declared outside of the function or block which are accessible from inside the function.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> max <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// has global scope</span>

<span class="token comment">// defining the addToRandom function</span>
<span class="token keyword">function</span> <span class="token function">addToRandom</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// the variable max can be used inside the function</span>
  <span class="token keyword">const</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> max<span class="token punctuation">)</span> <span class="token comment">// has function scope</span>
  <span class="token keyword">return</span> num <span class="token operator">+</span> random 
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addToRandom</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// a number between 1 and 10</span>
<span class="token comment">// the variable random does not exist outside the function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> random<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="anonymous-functions" tabindex="-1"><a class="header-anchor" href="#anonymous-functions" aria-hidden="true">#</a> Anonymous Functions</h2><p>Sometimes functions are passed as arguments to other function calls. This can either be done anonymously...</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//Standard anonymous function syntax</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The document is ready!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>...or by using a predefined function.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The document is ready!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">//Using a predefined function</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that when passing the predefined function as an argument, the parentheses are omitted. This is to prevent the function from being called when the JavaScript runtime first encounters the line of code.</p>`,14);function y(w,_){const s=c("ExternalLinkIcon");return i(),p("div",null,[u,a("p",null,[n("A "),a("a",d,[n("function"),e(s)]),n(" is a predefined block of code that can be executed some time in the future as many time as desired. Functions are essential to programming, and a core component to creating reusable code. Functions are a very powerful way to speed up, organize and improve control workflow.")]),r,a("p",null,[n("Defining a custom function is can be accomplished in a few different ways, but the most common method is the "),a("a",m,[n("function declaration"),e(s)]),n(".")]),k,a("p",null,[n("The "),a("a",v,[f,n(" statement"),e(s)]),n(" is used to end a functions execution and specify the value to be returned. By default, if no "),h,n(" statement is used, a function will return "),b,n(".")]),g])}const j=o(l,[["render",y],["__file","index.html.vue"]]);export{j as default};
