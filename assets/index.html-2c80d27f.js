import{_ as p,M as t,p as i,q as r,N as e,R as n,t as s,a1 as o}from"./framework-96b046e1.js";const l={},u=n("h1",{id:"fetch",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fetch","aria-hidden":"true"},"#"),s(" Fetch")],-1),d={href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/en-US/docs/Web/API/Promise",target:"_blank",rel:"noopener noreferrer"},f=o(`<h2 id="basic-fetch-request" tabindex="-1"><a class="header-anchor" href="#basic-fetch-request" aria-hidden="true">#</a> Basic Fetch Request</h2><p>In many cases, the basic fetch request, relying on the default setting, can be sufficient. The following example is a basic fetch request that returns JSON data.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/users/1&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">json</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),m=n("iframe",{height:"228",style:{width:"100%"},scrolling:"no",title:"Fetch - Basic Request",src:"https://codepen.io/IMD/embed/jOWqVNM?height=228&theme-id=light&default-tab=result",frameborder:"no",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/jOWqVNM'>Fetch - Basic Request</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1),_=n("h2",{id:"using-async-and-await",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#using-async-and-await","aria-hidden":"true"},"#"),s(" Using Async and Await")],-1),b={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"async",-1),v=n("code",null,"await",-1),y=n("code",null,"fetch",-1),w=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/users/1&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=n("iframe",{height:"220",style:{width:"100%"},scrolling:"no",title:"Fetch with Async and Await",src:"https://codepen.io/IMD/embed/ExgxKbm?height=220&theme-id=light&default-tab=result",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true"},`
  See the Pen <a href='https://codepen.io/IMD/pen/ExgxKbm'>Fetch with Async and Await</a> by IMD
  (<a href='https://codepen.io/IMD'>@IMD</a>) on <a href='https://codepen.io'>CodePen</a>.
`,-1);function I(j,A){const c=t("Youtube"),a=t("ExternalLinkIcon");return i(),r("div",null,[u,e(c,{id:"FmpMIaukgfA",citation:"griffith"}),n("p",null,[s("The "),n("a",d,[s("Fetch API"),e(a)]),s(" is a replacement for the older "),n("a",h,[s("XMLHttpRequest"),e(a)]),s(" and can be used to make Ajax requests. With a fetch request, the Fetch API will return a response in the form of a JavaScript "),n("a",k,[s("Promise"),e(a)]),s(".")]),f,m,_,n("p",null,[s("An "),n("a",b,[g,e(a)]),s(" function, in conjunction with the "),v,s(" keyword, enables asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need for chaining. Async functions can provide an alternative syntax for working with the "),y,s(".")]),w,x])}const q=p(l,[["render",I],["__file","index.html.vue"]]);export{q as default};
