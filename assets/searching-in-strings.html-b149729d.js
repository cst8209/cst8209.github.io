import{_ as i,M as o,p,q as l,N as e,R as n,t as s,a1 as t}from"./framework-96b046e1.js";const r={},u=n("h1",{id:"searching-in-strings",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#searching-in-strings","aria-hidden":"true"},"#"),s(" Searching in Strings")],-1),d=n("p",null,"JavaScript includes a few different methods that can be used to search for a string within another string.",-1),h=n("h2",{id:"indexof",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#indexof","aria-hidden":"true"},"#"),s(" indexOf()")],-1),k={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"indexOf()",-1),g=n("strong",null,"first",-1),v=n("code",null,"-1",-1),b=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> phrase <span class="token operator">=</span> <span class="token string">&#39;Almost before we knew it, we had left the ground.&#39;</span>

<span class="token comment">// get the index of the string &#39;we&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phrase<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;we&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 14</span>

<span class="token comment">// get the index of the string &#39;we&#39; after index 20</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phrase<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;we&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 26</span>

<span class="token comment">// get the index of the string &#39;ship&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phrase<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;ship&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),f={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"lastIndexOf()",-1),x=n("strong",null,"last",-1),w=n("h2",{id:"includes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#includes","aria-hidden":"true"},"#"),s(" includes()")],-1),S={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"includes()",-1),O=n("code",null,"true",-1),W=n("code",null,"false",-1),T=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> phrase <span class="token operator">=</span> <span class="token string">&#39;Almost before we knew it, we had left the ground.&#39;</span>

<span class="token comment">// check for the string &#39;we&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phrase<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;we&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// check for the string &#39;ship&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phrase<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;ship&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match()</h2>`,2),R={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"match()",-1),G=n("em",null,"regular expression",-1),J=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> quote <span class="token operator">=</span> <span class="token string">&#39;Beware the Ides of March.&#39;</span>

<span class="token comment">// Match for uppercase letters</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quote<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;B&#39;, &#39;I&#39;, &#39;M&#39;]</span>

<span class="token comment">// Match for word follow by comma</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quote<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+,)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> test()</h2>`,2),N={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"test()",-1),U=n("em",null,"regular expression",-1),A=n("code",null,"true",-1),q=n("code",null,"false",-1),E=t(`<div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The <code>test()</code> method is <strong>NOT</strong> a string method, but a method of the <code>RegExp</code> object. However, it is considered the best way to confirm if a pattern exists inside a string.</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> quote <span class="token operator">=</span> <span class="token string">&#39;Romeo, Romeo! wherefore art thou Romeo?&#39;</span>

<span class="token comment">// Search for a character that is not a letter or whitespace</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\s\\w]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// Search for a period (.)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="substring" tabindex="-1"><a class="header-anchor" href="#substring" aria-hidden="true">#</a> substring()</h2>`,3),I={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"substring()",-1),B={class:"custom-container danger"},H=n("p",{class:"custom-container-title"},"NOTE",-1),V=n("strong",null,"NOT",-1),C=n("code",null,"substring()",-1),L={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"substr()",-1),D=n("code",null,"substr()",-1),Z=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token string">&#39;Hello, World!&#39;</span>

<span class="token comment">// includes the first index but excludes the second</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Hello&#39;</span>

<span class="token comment">// if only one index, goes to the end of the string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;World!&#39;</span>

<span class="token comment">// swaps the indexes, if the first is larger</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;World&#39;</span>

<span class="token comment">// negative indexes are treated as 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Hello, World!&#39;</span>

<span class="token comment">// negative indexes are treated as 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="startswith" tabindex="-1"><a class="header-anchor" href="#startswith" aria-hidden="true">#</a> startsWith()</h2>`,2),F={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"startsWith()",-1),P=n("code",null,"true",-1),Q=n("code",null,"false",-1),X=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> phrase <span class="token operator">=</span> <span class="token string">&#39;Almost before we knew it, we had left the ground.&#39;</span>

<span class="token comment">// check if the string &#39;Almost&#39; is at the beginning</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phrase<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;Almost&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// check if the string &#39;we&#39; is at the beginning</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phrase<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;we&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),$={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith",target:"_blank",rel:"noopener noreferrer"},nn=n("code",null,"endsWith()",-1);function sn(en,an){const c=o("Youtube"),a=o("ExternalLinkIcon");return p(),l("div",null,[u,e(c,{id:"5NGnMnCSsnM",citation:"griffith"}),d,h,n("p",null,[s("The "),n("a",k,[m,e(a)]),s(" method return the index within a string of the "),g,s(" occurrence of the specified substring. The method will return "),v,s(" if the substring could not be found.")]),b,n("p",null,[s("Also see the "),n("a",f,[_,e(a)]),s(" method for returning the index of the "),x,s(" occurrence of the specified substring.")]),w,n("p",null,[s("The "),n("a",S,[j,e(a)]),s(" method determines whether a substring is within another string. The method returns "),O,s(" or "),W,s(" appropriately.")]),T,n("p",null,[s("The "),n("a",R,[y,e(a)]),s(" method retrieves the result of matching a string against a "),G,s(". The method will return and array with any matched patterns.")]),J,n("p",null,[s("The "),n("a",N,[z,e(a)]),s(" method searches for match between a "),U,s(" and the provided string. The method will return "),A,s(" is the a match is found and "),q,s(" if not.")]),E,n("p",null,[s("The "),n("a",I,[M,e(a)]),s(" method returns part of a string between the provided start index and the provided end index or the end of the string.")]),n("div",B,[H,n("p",null,[s("Do "),V,s(" confused the "),C,s(" method with the "),n("a",L,[Y,e(a)]),s(" method. While "),D,s(" is a valid method, it is considers to be a legacy function and should not be used.")])]),Z,n("p",null,[s("The "),n("a",F,[K,e(a)]),s(" method determines whether a string begins with the specified substring. The method returns "),P,s(" or "),Q,s(" appropriately.")]),X,n("p",null,[s("Also see the "),n("a",$,[nn,e(a)]),s(" method for determining whether a string ends with the specified substring.")])])}const on=i(r,[["render",sn],["__file","searching-in-strings.html.vue"]]);export{on as default};
