import{_ as t,p as a,q as i,Q as s,R as e,t as n,a1 as o}from"./framework-96b046e1.js";const r={},l=e("h1",{id:"git-workflow",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-workflow","aria-hidden":"true"},"#"),n(" Git Workflow")],-1),c=o(`<p>Git has a workflow that can be a little confusing for new developers, and it works like this.</p><p>When a new file is created in a directory that has been initialized with a Git repository, that file will be marked by Git as <strong>untracked</strong>. This means there is a new file that Git does not have in its history. To start versioning the file is a two-step process.</p><p>The first step is to add the file to the <strong>staging</strong> area. The staging area is where we put files that are ready for Git to <strong>commit</strong>. The staging area is important in the Git workflow because it allows us to commit some files, but not others, because only the files that are in the staging area will be committed.</p><p>After moving files to the stage area, they can be committed. Committing a file is like taking a snapshot of the file at that precise moment. It can then be quickly retrieved in the future, even if further changes have been made. You can think of committing like saving. The more often you commit, the more tracking of the file progress Git will store.</p><p>If a change is made to an existing file tracked by Git, it will be marked as <strong>modified</strong>. Modified files require the same process of adding the file to the staging area and committing the changes.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># stage the newly added or modified file</span>
<span class="token function">git</span> stage about.html

<span class="token comment"># commit the changes with a message</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;Adds about page.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function d(h,m){return a(),i("div",null,[l,s(` ::: watch
[Watch "Git workflows" on LinkedIn Learning](https://www.linkedin.com/learning/git-essential-training-the-basics/git-workflows)
::: `),c])}const f=t(r,[["render",d],["__file","workflow.html.vue"]]);export{f as default};
