import{_ as o,M as c,p,q as r,R as s,t as n,N as a,a1 as t}from"./framework-96b046e1.js";const l={},i=s("h1",{id:"patterns-in-strings",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#patterns-in-strings","aria-hidden":"true"},"#"),n(" Patterns in Strings")],-1),u={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"},d=s("em",null,"regular expressions",-1),g=s("em",null,"regular expressions",-1),k=s("h2",{id:"match",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#match","aria-hidden":"true"},"#"),n(" match()")],-1),h={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"match()",-1),v=s("em",null,"regular expression",-1),f=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> quote <span class="token operator">=</span> <span class="token string">&#39;Beware the Ides of March.&#39;</span>

<span class="token comment">// Match for uppercase letters</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quote<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;B&#39;, &#39;I&#39;, &#39;M&#39;]</span>

<span class="token comment">// Match for word follow by comma</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quote<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+,)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> search()</h2><p>The <a href=""><code>search()</code></a> method searches for match between a string and the provided <em>regular expression</em>. The method will return index of the first match, or <code>-1</code> if no match is found.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> quote <span class="token operator">=</span> <span class="token string">&#39;To be, or not to be: that is the question&#39;</span>

<span class="token comment">// Search for a character that is not a letter or whitespace</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quote<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\s\\w]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 5 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quote<span class="token punctuation">[</span>quote<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\s\\w]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// , </span>

<span class="token comment">// Search for a period (.)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quote<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -1 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> test()</h2>`,5),x={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"test()",-1),_=s("em",null,"regular expression",-1),w=s("code",null,"true",-1),S=s("code",null,"false",-1),q=t(`<div class="custom-container warning"><p class="custom-container-title">NOTE</p><p>The <code>test()</code> method is <strong>NOT</strong> a string method, but a method of the <code>RegExp</code> object. However, it is considered the best way to confirm if a pattern exists inside a string.</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> quote <span class="token operator">=</span> <span class="token string">&#39;Romeo, Romeo! wherefore art thou Romeo?&#39;</span>

<span class="token comment">// Search for a character that is not a letter or whitespace</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\s\\w]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// Search for a period (.)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function T(j,R){const e=c("ExternalLinkIcon");return p(),r("div",null,[i,s("p",null,[n("It is sometimes necessary to look for a pattern inside of a string, instead of a exact string. These patterns are often defined through the use of "),s("a",u,[d,a(e)]),n(". The following methods are used to search for the patterns within strings using such "),g]),k,s("p",null,[n("The "),s("a",h,[m,a(e)]),n(" method retrieves the result of matching a string against a "),v,n(". The method will return and array with any matched patterns.")]),f,s("p",null,[n("The "),s("a",x,[b,a(e)]),n(" method searches for match between a "),_,n(" and the provided string. The method will return "),w,n(" is the a match is found and "),S,n(" if not.")]),q])}const E=o(l,[["render",T],["__file","patterns-in-strings.html.vue"]]);export{E as default};
