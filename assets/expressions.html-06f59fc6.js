import{_ as s,p as n,q as a,a1 as e}from"./framework-96b046e1.js";const o={},t=e(`<h1 id="expressions" tabindex="-1"><a class="header-anchor" href="#expressions" aria-hidden="true">#</a> Expressions</h1><p>In programming, an expression is a fragment of code which can be evaluated—resulting in a single value.</p><h2 id="evaluating-expressions" tabindex="-1"><a class="header-anchor" href="#evaluating-expressions" aria-hidden="true">#</a> Evaluating Expressions</h2><p>Consider this expression: <code>1 + 1</code></p><p>Evaluating it will result in a value of <code>2</code>.</p><p>What about this expression: <code>1 == 1</code></p><p>This is a comparison operation which checks if the left and right operands are equal. Since they are, the result of this expression will be <code>true</code>. Note that this is not a text value, but rather a boolean value of <code>true</code> (as opposed to <code>false</code>, the only other option for booleans).</p><h2 id="using-expressions-with-variables" tabindex="-1"><a class="header-anchor" href="#using-expressions-with-variables" aria-hidden="true">#</a> Using Expressions with Variables</h2><p>Often, an expression will be evaluated and its result assigned to a variable. Here&#39;s how we&#39;d to that in JavaScript.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>It&#39;s a trivial example, but useful for understanding how expressions are evaluated.</p><ol><li>The expression <code>1 + 1</code> is first evaluated to <code>2</code></li><li>The variable <code>value</code> is then assigned the result</li></ol><h2 id="other-expression-uses" tabindex="-1"><a class="header-anchor" href="#other-expression-uses" aria-hidden="true">#</a> Other Expression Uses</h2><p>We&#39;ve seen so far that we can compute numerical values with expressions.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//Result: 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>However, sometimes we need to see if a value comparison equates to true or false. These are called boolean expressions.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">//Result: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This expression involves a comparison which can either be true or false—comparisons don&#39;t evaluate to numerical values. Comparisons are commonly used when determining when to run conditional code, or when to end a loop.</p><p>Here are a few more examples:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">10</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span>		<span class="token comment">//Result: true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">10</span><span class="token punctuation">)</span>		<span class="token comment">//Result: true (best practice)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">===</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">)</span>     <span class="token comment">//Result: true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span> 		<span class="token comment">//Result: false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!==</span> <span class="token number">42</span><span class="token punctuation">)</span>			<span class="token comment">//Result: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="complex-expressions" tabindex="-1"><a class="header-anchor" href="#complex-expressions" aria-hidden="true">#</a> Complex Expressions</h2><p>Multiple expressions can be evaluated together using logical operators.</p><p>The logical AND <code>&amp;&amp;</code> will only evaluate to <code>true</code> if all expresions involved are <code>true</code>.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">10</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">//Result: true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//Result: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The logical OR <code>||</code> will evaluate to <code>true</code> if at least one of the expressions involved is true.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//Result: true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//Result: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The logical NOT <code>!</code> will convert <code>false</code> to <code>true</code> and vice versa.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">//Result: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="truthy-and-falsy-expressions" tabindex="-1"><a class="header-anchor" href="#truthy-and-falsy-expressions" aria-hidden="true">#</a> Truthy and Falsy Expressions</h2><p>In programming, we can also perform some rather strange, but useful expression evaluations. Truthy and falsy expressions give general information about a variable without dealing with specific values. Truthy and falsy is best understood in the context of conditional code execution which is covered later in the course.</p><p>Here are some examples of falsy values:</p><ol><li>A variable with a numerical value of <code>0</code></li><li>An empty string (piece of text) <code>&#39;&#39;</code> or <code>&quot;&quot;</code></li><li>A variable with a <code>null</code> or <code>undefined</code> value</li></ol><p>Here are some examples of truthy values:</p><ol><li>A variable with any non-zero number</li><li>A string (piece of text) containing at least one character</li><li>An empty array <code>[]</code> or object <code>{}</code></li></ol>`,34),p=[t];function l(c,i){return n(),a("div",null,p)}const u=s(o,[["render",l],["__file","expressions.html.vue"]]);export{u as default};
