import{_ as i,M as a,p as c,q as l,N as e,R as n,t as s,a1 as p}from"./framework-96b046e1.js";const r={},d=n("h1",{id:"for-of",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#for-of","aria-hidden":"true"},"#"),s(" for...of")],-1),u={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"for...of",-1),m=n("code",null,"for",-1),v=n("code",null,"for...of",-1),h=p(`<h2 id="with-arrays" tabindex="-1"><a class="header-anchor" href="#with-arrays" aria-hidden="true">#</a> With Arrays</h2><p>The expression of the <code>for...of</code> statement starts with an initialization of the variable used to hold each item&#39;s value. This is followed by the keyword <code>of</code> and ends with the iterable.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mouse&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> animal <span class="token keyword">of</span> animals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Logs all the animals in the array</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token keyword">const</span> incomes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">62000</span><span class="token punctuation">,</span> <span class="token number">67000</span><span class="token punctuation">,</span> <span class="token number">75000</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> income <span class="token keyword">of</span> incomes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  total <span class="token operator">+=</span> income
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// 204000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="with-strings" tabindex="-1"><a class="header-anchor" href="#with-strings" aria-hidden="true">#</a> With Strings</h2><p>The <code>for...of</code> statement also works with strings. When iterating over a string, the defined variable will be assigned to each character, one at a time.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Ted Mosby&#39;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token keyword">of</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Logs each character of the name</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function f(b,_){const t=a("Youtube"),o=a("ExternalLinkIcon");return c(),l("div",null,[d,e(t,{id:"wc4jMuumqLM",citation:"griffith"}),n("p",null,[s("The "),n("a",u,[k,s(" statement"),e(o)]),s(" is specifically designed to iterate over iterable objects, like strings and arrays, but does not work on object literals. Unlike the "),m,s(" statement, the "),v,s(" statement does not rely on an index to retrieve a value but instead stores each value to a defined variable.")]),h])}const w=i(r,[["render",f],["__file","for...of.html.vue"]]);export{w as default};
