import{_ as t,M as i,p as r,q as l,R as n,t as e,N as a,a1 as s}from"./framework-96b046e1.js";const c="/images/git-pat-1.png",d="/images/git-pat-2.png",p="/images/git-pat-3.png",h="/images/git-pat-4.png",u="/images/git-pat-5.png",g="/images/git-pat-6.png",m={},b=s('<h1 id="remote-repositories" tabindex="-1"><a class="header-anchor" href="#remote-repositories" aria-hidden="true">#</a> Remote Repositories</h1><p>As previously discussed, Git is a distributed version control system in which the entire repository exists on each developer&#39;s computer. As developers make and commit changes, these changes still only exist on their local machines. So, how do developers share their commits? This is where remote repositories come in.</p><p>A remote repository is a Git repository stored in a location that all team members can access. This remote repository is then connected to the local repositories, which allows for easy and fast syncing between the local and remote repositories.</p><h2 id="preparing-git-to-work-with-github" tabindex="-1"><a class="header-anchor" href="#preparing-git-to-work-with-github" aria-hidden="true">#</a> Preparing Git to work with GitHub</h2><p>We need to connect our local(on our computer) git installation with our GitHub account. This is a two step process:</p><ol><li>Generating an personal access token on GitHub</li><li>Using a credential helper to remember our token on our computer</li></ol><h3 id="generating-a-personal-access-token" tabindex="-1"><a class="header-anchor" href="#generating-a-personal-access-token" aria-hidden="true">#</a> Generating a personal access token</h3>',7),v={href:"https://github.com",target:"_blank",rel:"noopener noreferrer"},y=s('<p><img src="'+c+'" alt="Account Settings"></p><p>From the left-side menu select the <strong>Developer Settings</strong> option</p><p><img src="'+d+'" alt="Developer settings"></p><p>On the next screen select the <strong>Personal access tokens</strong> setting and click <strong>Generate new token</strong></p><p><img src="'+p+'" alt="personal access token setting"></p><p>Enter your GitHub password if prompted</p><p><img src="'+h+'" alt="github password"></p><p>Next add a custom name for your token, and select <code>repo</code> and <code>admin:repo_hook</code> scope for your token</p><p><img src="'+u+'" alt="selecting token access"></p><p>Your token is ready, you can copy the token by clicking the clipboard icon from this screen when needed. Leave this window open for later reference.</p><p><img src="'+g+'" alt="Access token screen"></p><h3 id="installing-a-credential-helper" tabindex="-1"><a class="header-anchor" href="#installing-a-credential-helper" aria-hidden="true">#</a> Installing a credential helper</h3><p>In this step we will install a credential helper for caching out personal access token so we do not have to enter it every time we are working with our remote repository.</p>',13),f={href:"https://docs.github.com/en/github/using-git/caching-your-github-credentials-in-git",target:"_blank",rel:"noopener noreferrer"},k=s(`<p>Open your Visual Studio Code and open a new terminal from Terminal &gt; New Terminal option at the top.</p><h4 id="mac-users" tabindex="-1"><a class="header-anchor" href="#mac-users" aria-hidden="true">#</a> Mac Users</h4><ol><li>Find out if Git and the osxkeychain helper are already installed:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> credential-osxkeychain
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you see the following output then the credential helper is already installed on your Mac.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage: <span class="token function">git</span> credential-osxkeychain <span class="token operator">&lt;</span>get<span class="token operator">|</span>store<span class="token operator">|</span>erase<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>If the osxkeychain helper isn&#39;t installed and you&#39;re running OS X version 10.9 or above, your computer will prompt you to download it as a part of the Xcode Command Line Tools:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> credential-osxkeychain
xcode-select: note: no developer tools were found at <span class="token string">&#39;/Applications/Xcode.app&#39;</span>,
requesting install. Choose an option <span class="token keyword">in</span> the dialog to download the <span class="token builtin class-name">command</span> line developer tools.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Tell Git to use osxkeychain helper using the global credential.helper config:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> credential.helper osxkeychain
<span class="token comment"># Set git to use the osxkeychain credential helper</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="windows-users" tabindex="-1"><a class="header-anchor" href="#windows-users" aria-hidden="true">#</a> Windows Users</h3><p>Install the credential helper by running the following command in your VS Code &gt; Terminal</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> credential.helper wincred
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="cloning-a-repository" tabindex="-1"><a class="header-anchor" href="#cloning-a-repository" aria-hidden="true">#</a> Cloning a Repository</h2>`,14),w={href:"https://git-scm.com/docs/git-clone",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"git clone",-1),x={href:"https://github.com/imdac/git-up",target:"_blank",rel:"noopener noreferrer"},G=n("strong",null,"Clone or download",-1),S=s(`<p>We can clone a remote repository using the Command-Line. We start by opening our command-line tool and navigating to our projects folder.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># navigate to the projects folder</span>
<span class="token builtin class-name">cd</span> projects
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we type <code>git clone</code> followed by the URL that we copied. Then hit enter.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># clone the repository</span>
<span class="token function">git</span> clone https://github.com/imdac/git-up.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="syncing-repositories" tabindex="-1"><a class="header-anchor" href="#syncing-repositories" aria-hidden="true">#</a> Syncing Repositories</h2><p>A remote repository is only useful if changes made locally can synchronize to the remote repository. Fortunately, this can be done using the <code>pull</code> and <code>push</code> commands.</p><h3 id="pulling" tabindex="-1"><a class="header-anchor" href="#pulling" aria-hidden="true">#</a> Pulling</h3><p>Let&#39;s say a week has gone by, and other team members have made changes to the remote repository. We need to &quot;pull&quot; changes down to our local repository.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># pull commits from remote repository</span>
<span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This process can also be done using VS Code by using the Synchronize Changes button found in the Status Bar.</p><h3 id="pushing" tabindex="-1"><a class="header-anchor" href="#pushing" aria-hidden="true">#</a> Pushing</h3><p>So, we have cloned the remote repository and are now working locally. We made some changes to our local repository and committed those changes locally. Now we are ready to sync our commits to the remote repository. We do this using <code>git push</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># push commits to the remote repository</span>
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s it. Git will take all of the commits that we have added since we synced our project and &quot;push&quot; them to the remote repository.</p>`,14),T={href:"https://code.visualstudio.com/docs/editor/versioncontrol#_cloning-a-repository",target:"_blank",rel:"noopener noreferrer"};function C(L,N){const o=i("ExternalLinkIcon");return r(),l("div",null,[b,n("p",null,[e("Login to your "),n("a",v,[e("GitHub"),a(o)]),e(" account and go to your account settings, clicking on your profile icon on the top right corner.")]),y,n("p",null,[e("These instructions are taken from "),n("a",f,[e("GitHub docs"),a(o)]),e(".")]),k,n("p",null,[e("The "),n("a",w,[_,a(o)]),e(' command is used to "copy" a remote repository to a local computer. This process will also make a connection between the two so that syncing can occur.')]),n("p",null,[e("We have a remote repository on GitHub that we want to clone down to our local machine. We would navigate to the repository page on GitHub, "),n("a",x,[e("https://github.com/imdac/git-up"),a(o)]),e(", and from there get the repository URL, which is found under the "),G,e(" button. Clicking the clipboard icon (📋) will copy the URL.")]),S,n("p",null,[e("This process can also be done using VS Code by using the Synchronize Changes button found in the Status Bar. For more information, refer to the "),n("a",T,[e("Official Documentation"),a(o)])])])}const H=t(m,[["render",C],["__file","remote.html.vue"]]);export{H as default};
