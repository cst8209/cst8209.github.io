import{_ as e,p as s,q as n,a1 as a}from"./framework-96b046e1.js";const o={},t=a(`<h1 id="javascript-booleans" tabindex="-1"><a class="header-anchor" href="#javascript-booleans" aria-hidden="true">#</a> JavaScript Booleans</h1><p>A boolean is a data type that can only have two values <code>true</code> or <code>false</code>. In JavaScript, these <code>true</code> and <code>false</code> are not strings but special keywords.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isActive <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">const</span> isAdmin <span class="token operator">=</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="expressions-as-booleans" tabindex="-1"><a class="header-anchor" href="#expressions-as-booleans" aria-hidden="true">#</a> Expressions as Booleans</h2><p>Booleans are often used to decide which block of code to execute (conditional statements) or repeat (loops). In these cases, often an expression is used in place the <code>true</code> and <code>false</code> values.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token number">5</span>

<span class="token comment">/* if statement */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// if the variable number is equal to 5</span>
  <span class="token comment">// code to execute if the conditional expression is true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, the variable <code>number</code> does equal five, so the expression <code>number === 5</code> will equal <code>true</code>.</p><h2 id="truthy-and-falsy" tabindex="-1"><a class="header-anchor" href="#truthy-and-falsy" aria-hidden="true">#</a> Truthy and Falsy</h2><p>Some expressions cannot truly be either <code>true</code> or <code>false</code>, but they can take on some of the properties of <code>true</code> or <code>false</code>. Review the following.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Michael&#39;</span>
<span class="token keyword">const</span> empty <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// if the variable name is true</span>
  <span class="token comment">// code to execute if the conditional expression is true</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>empty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// will not execute</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above, we are asking if the variable <code>name</code> is <code>true</code> or <code>false</code>. But because <code>name</code> is a string, by definition, it cannot be <code>true</code> or <code>false</code>. However, due to type conversion, any non-empty string is perceived to be <code>true</code>. We call such expressions, <em>truthy</em> expressions. Because, while the variable <code>name</code> is not <code>true</code>, JavaScript will act as if it is true. Likewise, an empty string, like the variable <code>empty</code> will be considered <code>false</code> or <em>falsy</em></p><p>In many ways, there is no difference between <code>true</code> and <em>truthy</em> and <code>false</code> and <em>falsy</em>. But, they are <strong>NOT</strong> identical.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Michael&#39;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token comment">// will not execute</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example above, we can see that the variable <code>name</code> while <em>truthy</em> does not equal <code>true</code>.</p>`,14),c=[t];function i(l,d){return s(),n("div",null,c)}const p=e(o,[["render",i],["__file","booleans.html.vue"]]);export{p as default};
